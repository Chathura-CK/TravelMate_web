{"ast":null,"code":"import axios from'axios';import{LOGIN_REQUEST,LOGIN_SUCCESS,LOGIN_FAILURE,REGISTER_USER_REQUEST,REGISTER_USER_SUCCESS,REGISTER_USER_FAILURE,LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE,CLEAR_ERRORS}from'../../constants/userConstants';// Register user \nexport const register=userData=>async dispatch=>{try{dispatch({type:REGISTER_USER_REQUEST});const config={headers:{'Content-Type':'multipart/form-data'}};const{data}=await axios.post('http://localhost:5000/auth/signup',userData,config);dispatch({type:REGISTER_USER_SUCCESS,payload:data.user});}catch(error){dispatch({type:REGISTER_USER_FAILURE,payload:error.response.data.message});}};//Login\nexport const login=(email,password)=>async dispatch=>{try{dispatch({type:LOGIN_REQUEST});const config={headers:{'Content-Type':'application/json'}};const{data}=await axios.post('http://localhost:5000/auth/login',{email,password},config);dispatch({type:LOGIN_SUCCESS,payload:data.user});}catch(error){dispatch({type:LOGIN_FAILURE,payload:error.response.data.message});}};// Load user\nexport const loadUser=()=>async dispatch=>{try{dispatch({type:LOAD_USER_REQUEST});const{data}=await axios.get('http://localhost:5000/auth/profile');dispatch({type:LOAD_USER_SUCCESS,payload:data.user});}catch(error){dispatch({type:LOAD_USER_FAILURE,payload:error.response.data.message});}};// Clear errors\nexport const clearErrors=()=>async dispatch=>{dispatch({type:CLEAR_ERRORS});};","map":{"version":3,"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","CLEAR_ERRORS","register","userData","dispatch","type","config","headers","data","post","payload","user","error","response","message","login","email","password","loadUser","get","clearErrors"],"sources":["C:/Users/chath/Desktop/React projects/TravelMate_web/frontend/src/redux/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n    LOGIN_REQUEST,LOGIN_SUCCESS,LOGIN_FAILURE,\r\n    REGISTER_USER_REQUEST,REGISTER_USER_SUCCESS,REGISTER_USER_FAILURE,\r\n    LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE,\r\n    CLEAR_ERRORS\r\n    } from '../../constants/userConstants';\r\n\r\n  // Register user \r\n\r\n  export const register =(userData) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({type: REGISTER_USER_REQUEST})\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post('http://localhost:5000/auth/signup',userData, config)\r\n\r\n        dispatch({\r\n            type: REGISTER_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch(error){\r\n        dispatch({\r\n            type: REGISTER_USER_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n  //Login\r\n  export const login = (email, password) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({type: LOGIN_REQUEST})\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const {data} = await axios.post('http://localhost:5000/auth/login',{ email, password}, config)\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch(error){\r\n        dispatch({\r\n            type: LOGIN_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Load user\r\nexport const loadUser =() => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({type: LOAD_USER_REQUEST})\r\n\r\n     \r\n        const {data} = await axios.get('http://localhost:5000/auth/profile')\r\n\r\n        dispatch({\r\n            type: LOAD_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch(error){\r\n        dispatch({\r\n            type: LOAD_USER_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Clear errors\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS,\r\n    })\r\n}\r\n  "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OACIC,aAAa,CAACC,aAAa,CAACC,aAAa,CACzCC,qBAAqB,CAACC,qBAAqB,CAACC,qBAAqB,CACjEC,iBAAiB,CAACC,iBAAiB,CAACC,iBAAiB,CACrDC,YAAY,KACL,+BAA+B,CAExC;AAEA,MAAO,MAAM,CAAAC,QAAQ,CAAGC,QAAQ,EAAK,KAAO,CAAAC,QAAQ,EAAK,CACvD,GAAI,CAEAA,QAAQ,CAAC,CAACC,IAAI,CAAEV,qBAAqB,CAAC,CAAC,CAEvC,KAAM,CAAAW,MAAM,CAAG,CACXC,OAAO,CAAE,CACL,cAAc,CAAE,qBACpB,CACJ,CAAC,CAED,KAAM,CAACC,IAAI,CAAC,CAAG,KAAM,CAAAjB,KAAK,CAACkB,IAAI,CAAC,mCAAmC,CAACN,QAAQ,CAAEG,MAAM,CAAC,CAErFF,QAAQ,CAAC,CACLC,IAAI,CAAET,qBAAqB,CAC3Bc,OAAO,CAAEF,IAAI,CAACG,IAClB,CAAC,CAAC,CAEN,CAAE,MAAMC,KAAK,CAAC,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAER,qBAAqB,CAC3Ba,OAAO,CAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM,OACjC,CAAC,CAAC,CACN,CAEJ,CAAC,CAIC;AACA,MAAO,MAAM,CAAAC,KAAK,CAAGA,CAACC,KAAK,CAAEC,QAAQ,GAAK,KAAO,CAAAb,QAAQ,EAAK,CAC5D,GAAI,CAEAA,QAAQ,CAAC,CAACC,IAAI,CAAEb,aAAa,CAAC,CAAC,CAE/B,KAAM,CAAAc,MAAM,CAAG,CACXC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CACJ,CAAC,CACD,KAAM,CAACC,IAAI,CAAC,CAAG,KAAM,CAAAjB,KAAK,CAACkB,IAAI,CAAC,kCAAkC,CAAC,CAAEO,KAAK,CAAEC,QAAQ,CAAC,CAAEX,MAAM,CAAC,CAE9FF,QAAQ,CAAC,CACLC,IAAI,CAAEZ,aAAa,CACnBiB,OAAO,CAAEF,IAAI,CAACG,IAClB,CAAC,CAAC,CAEN,CAAE,MAAMC,KAAK,CAAC,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEX,aAAa,CACnBgB,OAAO,CAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM,OACjC,CAAC,CAAC,CACN,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,QAAQ,CAAEA,CAAA,GAAM,KAAO,CAAAd,QAAQ,EAAK,CAC7C,GAAI,CAEAA,QAAQ,CAAC,CAACC,IAAI,CAAEP,iBAAiB,CAAC,CAAC,CAGnC,KAAM,CAACU,IAAI,CAAC,CAAG,KAAM,CAAAjB,KAAK,CAAC4B,GAAG,CAAC,oCAAoC,CAAC,CAEpEf,QAAQ,CAAC,CACLC,IAAI,CAAEN,iBAAiB,CACvBW,OAAO,CAAEF,IAAI,CAACG,IAClB,CAAC,CAAC,CAEN,CAAE,MAAMC,KAAK,CAAC,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEL,iBAAiB,CACvBU,OAAO,CAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM,OACjC,CAAC,CAAC,CACN,CACJ,CAAC,CAED;AAEA,MAAO,MAAM,CAAAM,WAAW,CAAGA,CAAA,GAAM,KAAO,CAAAhB,QAAQ,EAAK,CACjDA,QAAQ,CAAC,CACLC,IAAI,CAAEJ,YACV,CAAC,CAAC,CACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}